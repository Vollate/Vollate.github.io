{"meta":{"title":"Vollate's Blog","subtitle":"","description":"Personal blog","author":"Vollate","url":"http://blog.vollate.top","root":"/"},"pages":[{"title":"categories","date":"2023-08-31T10:14:48.000Z","updated":"2024-04-29T07:08:05.775Z","comments":false,"path":"categories/index.html","permalink":"http://blog.vollate.top/categories/index.html","excerpt":"","text":""},{"title":"About Me","date":"2023-08-31T10:15:23.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"about/index.html","permalink":"http://blog.vollate.top/about/index.html","excerpt":"","text":"代码偏好 语言: C++, JAVA, js, Go GNU/Linux 发行版: Arch, Debian 编辑器: Vim, Jetbrains IDE, VScode 爱好 番, 轻小说 养老 fps 选手，底力不足音游人，假期一般会推 gal 睡觉 目标 有一个健康的作息 锻炼身体，尤其是小臂和手腕(音游体力虚b) 好好活着"},{"title":"links","date":"2023-08-31T10:45:18.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"links/index.html","permalink":"http://blog.vollate.top/links/index.html","excerpt":"","text":""},{"title":"Repository","date":"2023-08-31T10:15:34.000Z","updated":"2024-04-29T07:08:05.775Z","comments":false,"path":"repository/index.html","permalink":"http://blog.vollate.top/repository/index.html","excerpt":"","text":""},{"title":"tags","date":"2023-08-31T10:12:46.000Z","updated":"2024-04-29T07:08:05.775Z","comments":false,"path":"tags/index.html","permalink":"http://blog.vollate.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript 笔记","slug":"javascript","date":"2024-04-29T07:02:51.000Z","updated":"2024-04-29T07:08:05.771Z","comments":true,"path":"2024/04/29/javascript/","permalink":"http://blog.vollate.top/2024/04/29/javascript/","excerpt":"","text":"DOM:Document Object Model &lt;script&gt; element use js code: &lt;script&gt; codes &lt;/script&gt; use js file: &lt;script src=&quot;&quot;&gt;&lt;/script&gt; 外部js位置: &lt;head&gt; after html element in body: 避免过多js加载导致页面卡顿空白 &lt;noscript&gt; 加载失败或不支持js时显示 Characteristic defer :立即下载，推迟脚本到页面加载完成再加载,并按顺序执行,仅对外部js有效，begin in HTML4 async:同上，不保证顺序 动态加载：DOM API??? TODO XHTML(历史遗物) To use js, must add type=“text/javascript” characteristic in &lt;script&gt; 不能正确识别 &lt;, 会当成标签开始 ECMAScript variable define var 范围:函数作用域 函数中var定义局部变量，省略var定义全局变量 提升,可以全局重复声明 在全局声明会成为windows的属性 for loop declare will leak to global let 块作用域 不提升，不能全局重复声明 在全局声明不会成为windows的属性 不能在同一块中重复声明 for loop declare won’t leak const 限制指向的对象的引用不能更改，但可以更改指向的对象 让对象彻底const(连同键值冻结): Object.freeze() const优先，let次之，少用var Type typeof返回值: undefined:let or var but haven’t init boolean: Boolean()transform string:use `` ‘’ “” 不可变,更改=新建新的字符串 .toString(x) x是进制数,2,8... 除了null和undefined都有 String() :better when you don’t know if variable is null or undefined 模板字面量&quot;``&quot;,保存内部空格和换行，可以跨行定义 插值: $&#123;var&#125; 调用var.toString()，也可以调用函数和方法 模板字面量标签函数: TODO raw string: use String.rawyour string,对字符串数组ary使用ary.raw获得原始字符串内容 number: type: hex:0x… oct:0…(disable in strict mode) dec integer:1, 1.0 float:2.3, 3.1e7 NaN: isNaN() functions: Number(): for any type boolean:true 1, false 0 null 0 undefined NaN string: empty 0 not a number: NaN parseInt(): ignore space, if first char not +,-,number, return NaN parseInt(&quot;AF&quot;,16) use as hex parseFloat(): only for dec object: 使用new+对象类型名创建,概念类似于Java的Object类，所用obj的基类 每一个Obj实例的属性和方法: constructor() hasOwnProperty() isPrototypeOf(object):当前是否为另一个对象的 原型 propertyIsEnumerable(propertyName):判断是否可以使用for-in枚举 toLocaleString(propertyName):返回对象字符串表示，用于反映对象本地化执行环境 toString() valueOf():通常和上面相同 function symbol:符号,为对象添加属性 TODO:看不懂 使用 Symbol('some string') 初始化 - 不能和new一起使用，避免创建符号包装对象;但可以使用Object()包装 - 全局符号注册表: Symbol.for() 创建，即使字符串相同，全局和使用Symbol()创建的也不相同。键值必须为字符串,为空则为undefined Symbol.keyFor(your symbol) 查询全局注册表，不是返回 undefined TODO Null: null==undefined, null !== undefined if(null)==false Operator ++i &amp; --i:同C++ string: “12”++=13; “string”++=NaN boolean: false++=1; true++=2 float: 1.1++=2.1 Object: obj++=obj.valueOf()++;if valueOf()=NaN,use toString() +i&amp; -i 对number正常 对非number进行Number()转型，调用valueOf()ortoString() 位操作: ECMAScript所有数值以64bits存储，但位操作是先转换成32bits然后操作然后转成64bits 就是只用考虑32bits操作的意思 有符号整数前31位是数，最后一位(最左边)是符号(0+,1-) 正值以二进制存储 负值以二补数存储: 1. 找绝对值的二进表示 2. 所有位取反 3. 给结果+1(按二进制) 负数调用toString(2)返回-(绝对值的二进制数) 按位非: ~ 所有位取反，结果是对数值取反后-1 按位与: | 当仅两数该位同时为0时为0 按位异或: ^ 相同为0不同为1 左移: &lt;&lt; 有符号右移: &gt;&gt;，空出来补和符号位相同的数字 无符号右移: &gt;&gt;&gt; 空出来补零 bool operator: ! return: object: false empty/not empty string: true/false 0: true not zero(include Infinity): false null: ture NaN: true硬 undefined: true !!=Boolean() a &amp;&amp; b :硬 短路求值 a is object,return b硬硬 b is object,return b硬 only when a is true a&amp;&amp;b is object, return b a or b is null, return硬硬 null a or b is NaN, return NaN a or b is undefined, return undefined a || b: 短路求值 a and b is null, return null a and b is NaN, return NaN a and b is undefined, return undefined 常用于变量赋值，如果a非null or undefined,赋值为a,否则赋值b 指数: Math.pow() or ** a**=2 -&gt; a^2 &gt; &gt;= &lt;= &lt;: 对字符串来说，逐个对比字符串的对应编码 == ===: ==比较时全部转换为数值(except null undefined, null == undefined) === 全部相等(未转换)才为true ? :: same as c++ , 单行多赋值或辅助赋值 loop for: - for(;;) infinity loop - for-in:枚举非符号键属性,不保证顺序 - for-of:按照对象next()产生顺序迭代，不支持next()报错 label label: statement 用于break/continue到指定位置 with with(obj)&#123;&#125;将代码作用域设置为对象 switch 适用于所有数据类型,条件可以是表达式或变量 比较时使用的是=== function define: function fuc_name()&#123;&#125; In strict mode: 函数名和参数不能是eval or arguments 两个命名参数不能重名 variable primitive value and reference value 原始变量按值访问 js不允许直接访问内存，保存引用值的变量只能按引用访问 dynamic characteristic 只有reference type可以随时增删,修改属性和方法 原始类型初始化必须使用原始字面量，用new会创建object copy 原始值是拷贝，引用值是引用(拷贝指针) function arguments pass Only has pass by value: 对于原始值直接拷贝 对于引用值，拷贝指针，因此依然可以对指针所指内存进行修改，但更改指针所指内存不会在外部生效 determine type typeof: return “object” when obj is null or object a instanceof b: check instance 执行上下文和作用域 每个上下文都有关联的变量对象，存储着上下文中定义的所有变量和对象,上下文执行完后会销毁 全局上下文: 只有在退出前才销毁 浏览器中是window对象 通过var定义的全局变量和函数会出现在全局上下文中，let和const不会，但作用域解析上和var一样的效果。 函数上下文: 执行函数时推到一个上下文栈上，执行结束弹出 作用域链 依次递减(拆包),直到全局上下文的变量对象。变量搜索从前开始 作用域链增强:临时修改上下文 try catch 的catch:创建变量对象包含抛出错误对象的声明 with:添加对象到作用域前端,在with中声明变量会添加到函数上下文中，离开销毁(可以当返回值) 变量声明 var:自动添加到最近的上下文中,未经声明初始化变量为全局变量 提升不意味着赋值语句的提升，变量在赋值前是undefined;可以多次声明 let：块级作用域(if,while,for语句和单独的块) const只用于顶级原语和对象，但对象键值不受影响 让对象彻底const(连同键值冻结): Object.freeze():赋值不会报错但不会产生副作用 标识符查找顺序:沿作用域链查找 Memory manage GC 标记清理(mark and sweep),mainly used 引用计数(RC),may have loop reference error for COM 某些情况还是会泄漏 Improve performance 全局变量不用后设为null 多用const let 减少隐藏类:一次性完成类所有属性声明 Memory leak implict global variable opening timer closure 使用静态分配和对象池 Basic reference type 引用值或对象是某个特定 引用类型 的实例 Date Date() 保存当前日期和时间 Date.parse(&quot;date string&quot;)转化为UNIX纪元至date的毫秒数 Date.UTC(&quot;date string&quot;): use UTC format 历史问题:老浏览器toString() 和 toLocaleString()输出可能不一样 RegExp 正则: - pattern: - g: global - i: ignore character case - m: mutiline - y: 粘贴模式,只查找从lastindex开始之后的字符串 - u: enable unicode - s: dotAll methord，元字符，匹配任何字符(\\n \\r) Instance charcaterist: 一堆bool指示搜索模式是否开启 source: 搜索的字面量字符串 flags: 标记的字符串 methords: exec() 略 原始值包装类型 String,Boolean,Number:让原始值拥有对象的行为，创建的包装对象仅存在于该行代码中 Object():工厂构造方法，自动创建符合传入值类型的原始值包装对象 少用Boolean,容易出事 Number: toFixed(num):输出多少位浮点数(0~20) toPrecision():智能输出 isInteger() Number.isSafeInteger():防止爆int String: js字符串由16位码元(code unit)构成，每个码元代表一个字符,编码方式UCS-2&amp;UTF-16 length split string: slice() substr() substring() index: indexOf() lastIndexOf() startsWith() endsWith() includes() 迭代器:let iterator=string[Symbol.iterator]() etc… 单例内置对象 Global 全局作用域中定义的变量和函数都会成为Global对象的属性 methords: 1. URL encoding: use %utf8code replace not ASCII character - encodeURL() : replace space with %20 - encodeURLComponent(): change to standard URL format - decodeURL() - decodeURLComponent() 2. eval(&quot;js code&quot;):same as command to run in shell script 获取Global对象: 1. window对象实现是Global对象的代理 2. let global=function()&#123;return this;&#125;() Math Characterist: 1. Math.E:自然对数基数e 2. Math.LN10:ln10 3. LN2 4. etc Methords: 1. max() &amp; min() 2. 舍入: 1. ceil(): 向上舍入 2. floor(): 向下 3. round(): 四舍五入 4. fround(): 返回最接近的单精度(32bits)float 3. random(): 0~1 4. selectFrom(a,b): return a integer I ( a&lt;=I&lt;=b ) 5. exp(x): e^x 6. log(x): lnx 7. etc 集合引用类型 Object 获取属性: - obj.a - obj[&quot;a&quot;] Array create: Array.form(obj): 可迭代对象 Array.of(parameters) 空位：let a=[,,,,], a.length = 5, every member is undefined check: most time: instanceof Array.isArray():解决在两个不同网络框架下传输数组，因为构造函数不同无法检测的问题 iterator methords: keys(): return index iterator values(): return value iterator entries(): intelegently return iterator fill(element, indexbegin=0, indexend=length-1): copyWithin():略 stack &amp; queue methords（栈&amp;队列方法）: push() &amp; pop(): insert/pop at the end shift(): begin reverse() sort() operations: concat() slice() splice():插入删除和替换 strict equal search: indexOf() &amp; lastIndexOf(): -1 if not find includes(): return bool assert search: find(): return first fit element findIndex(): … iterate methords: every() filter() forEach() map() some() 归并方法: reduce() reduceRight() 定型数组 ArrayBuffer History: 解决复杂图形程序渲染而原生Array转型所带来的性能问题 ArrayBuffer(size): fixed size,类似malloc(),但不完全相同 use arrayBuffer: DataView 为文件和网路I/O设计,支持对缓冲数据的高度控制 使用 ElementType 实现转换(number 2 缓冲区二进制) 默认大端序TODO 越界：throw RangeError TODO Map 使用任何JS数据类型作为键，Map内部使用 SameValueZero(有时候会寄，RTFM) 进行比较(基本相当于===)，映射值没有限制 Init:成对传入键/值: let a = new Map( [[&quot;k1&quot;,&quot;v1&quot;],[&quot;k2&quot;,&quot;v2&quot;]] ) Methords: add: set() search: get() has() size() remove: delete() clear() Iterate: use entries() or Symobl.iterator获取iterator 迭代可以更改键和值，但是不能更改映射关系 Map VS Object Memory: Map use less Insert speed: Map a bit quicker Search speed: 少量键/值时，Object块(有时),大量老老实实用Map Delete performance: Object是屎 WeakMap 如果没有指向键的引用，该行代码执行完后键就会被gc，随后值也会被gc 不可迭代 Applicate: TODO Set Like a enhanced Map(similar APT) RTFM WeakSet like WeakMap to Map,没有对象引用的weakset会被gc Useage: TODO Iterator &amp; Generator Iterator 任何实现Iterable接口的data struct都可以被实现Iterator接口的结构消费 检查是否存在默认迭代器: struct[Symbol.iterator]有返回迭代器，无undefined Use: next(): return value and done return(): 提前关闭iterator 不同迭代器可以分别的对对象进行一次性遍历；迭代器仅仅是指针，不会对对象进行快照 定义[Symbol.iterator()]来对对象自定义迭代器 Generator Define: function* fuc_name()&#123;&#125; 不能用箭头函数 生成器对象开始处于暂停执行状态,使用next()恢复执行，返回值和iterator一样(同一个接口) yield 中断执行，返回后面的值，函数作用域状态会被保留,调用next恢复(仅限生成器内部直接上下文使用，内部嵌套函数也不行) Useage: TODO Object Just a piece of shit 属性的类型:(略) 数据属性:描述数据的特性 访问器属性:决定更改数据的方式 Operations, just schema below 定义属性 读取属性的特性 合并对象 对象标识和相等判定 合并对象: target.assign(Obejct...) 合并所有可迭代值 浅拷贝 no exception guarantee 对象标识和相等判定: Obeject.is(lhs,rhs) enhanced obejcet syntax: 简写属性 可计算属性 简写方法名 简写方法名(省略: function) 对象的解构:类似auto [a,b]:tuple&lt;int,int&gt;,不存在的属性为undefined 调用toObject,所以原始值会被转换为对象，null和undefined会throw exception Function Also a piece of shit function is a objecet Promise and asynchronous function Promise instantiate: new Promise(some_function) Promise.resolve() Promise.reject() condition: pending: default fulfilled/resolved: by call resolve() rejected: by call reject() prototype: Promise.prototype.then(f_resolve,f_reject) Promise.prototype.catch(f_reject) Promise.prototype.finally(f_reject) Promise.all([sub_promise1,sub_promise2...]) Promise.race(...) Asynchronous function Keyword: async: 使得函数总是返回promise封装的对象，但仍是同步求值 await: 必须在异步函数定义中使用 useage: sleep: async function test()&#123;await sleep(514);&#125; message queue 异步消息先进先出，等执行完当前线程再pop BOM Browser Object Model Object window window location window.moveTo()window.moveBy()可能被部分或全部禁用 setTimeout setTimeout(func,1000) 1000ms后把函数添加到队列 setInterval(func,1000) 每隔1000ms塞进队列一次 对话框 alert() confirm() prompt() Object location location.hash “#contents” URL 散列值（井号后跟零或多个字符），如果没有则为空字符串 location.host “www.wrox.com:80” 服务器名及端口号 location.hostname “www.wrox.com” 服务器名 location.href “http://www.wrox.com:80/WileyCDA/?q=javascript#contents” 当前加载页面的完整 URL。 location 的 toString()方法返回这个值 location.pathname “/WileyCDA/” URL 中的路径和（或）文件名 location.port “80” 请求的端口。如果 URL 中没有端口，则返回空字符串 location.protocol “http:” 页面使用的协议。通常是 “http:” 或 “https:” location.search “?q=javascript” URL 的查询字符串。这个字符串以问号开头 location.username “foouser” 域名前指定的用户名 location.password “barpassword” 域名前指定的密码 location.origin “http://www.wrox.com” URL 的源地址。只读 DOM Document Object Model Node each element is one node nodeName &amp; nodeValue: depend one node type(用前先检查检查节点是不是元素) node relation: childNodes[x], parentNode[x], firstChild,lastChild, nextSibling, previousSibling add node: appendChild, insertBefore(node,position) Document subElements: html body maybe, depend on browser: DocumentType, Comment Information: title URL domain referrer locate elements: getElementById() getElementByTagName() $(&quot;id&quot;) equal to getElementById special elements: anchors applets: abandoned forms imges links hasFeature() write to document write(): 加载完后再写会刷新整个界面 writeln() Element parentNode: Document or Element set attribute: setAttribute(name, value) “attributes” 's attribute: getNamedItem(name) removeNamedItem(name) setNamedItem(name) item(pos) create element: createElement() 创建后要把元素加入文档树才能显示(appendChild, insertBefore...),加入后会立即渲染，并且之后的修改会立即反应出来 Text 按字面量解释纯文本 nodeValue=amount of the characters methords: appendData(text) deleteData(offset, count) insertData(offset, text) replaceData(offset,count,text) splitText(offset) substringData(offset,count) not belong methords: parent.normalize()合并所有相邻的Text节点 parent.child.splitText(num) Comment … CDATASection specific for xml 动态样式 懂得都懂,不懂就rtfm MutationObserver interface 在DOM被修改时异步回调 DOM extension 本章跳过 Selectors API HTML5 DOM2&amp;3 本章跳过 Event event flow 传递方式类似 try catch 从window捕获 event type: 用户界面事件（UIEvent）：涉及与 BOM 交互的通用浏览器事件。 焦点事件（FocusEvent）：在元素获得和失去焦点时触发。 鼠标事件（MouseEvent）：使用鼠标在页面上执行某些操作时触发。 滚轮事件（WheelEvent）：使用鼠标滚轮（或类似设备）时触发。 输入事件（InputEvent）：向文档中输入文本时触发。 键盘事件（KeyboardEvent）：使用键盘在页面上执行某些操作时触发。 合成事件（CompositionEvent）：在使用某种 IME（Input Method Editor，输入法编辑器）输入字符时触发。 太多了，略 animation and canvas 略… JSON JSON.stringify(): to json JSON.parse(): to js element serialization option JSON.stringify(trg,[&quot;name1&quot;,&quot;name2&quot;...],4)： 只返回特定对象，每级缩进4空格 obj.toJSON() override stringify behavior","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://blog.vollate.top/categories/JavaScript/"}],"tags":[{"name":"Notes","slug":"Notes","permalink":"http://blog.vollate.top/tags/Notes/"}]},{"title":"Shell Script Notes","slug":"sh","date":"2024-04-28T17:20:26.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"2024/04/28/sh/","permalink":"http://blog.vollate.top/2024/04/28/sh/","excerpt":"","text":"Basic knowledge shell type Bourne shell: $ as default prompt (sh, bash…) C shell: % as default prompt (csh, tcsh) #!/bin/bash is called shebang construct chmod +x ./*.shmake the script executable variable invalid variable name: begin with !, *, -, number(1,2,3...) define:name=value access value: $name readonly unset:cannot used to unset readonly variables type local variable environment variable shell variable:variable required by shell(local + environment) special variables(commandline parameters) name what $0 script’s filename 1−9,1-9,1−9,{n}(when n&gt;9) the n_th argument $# number of arguments $* all arg in individually double quoted $@ all arg in double quoted https://stackoverflow.com/a/2761739 $? the exit status of the last command executed $$ process number of the current shell, for shell scripts, this is the pid under which they are executing $! the process number of the last background command use array name[index]=value name=(value1 value2 value3...) in bash use $&#123;name[index]&#125; to use value operator there must have a space between [,operator,variable and ] Arithmetic Operators use awk or expr eg: sum = expr 2 + 2 Bourne shell didn’t originally have any mechanism to perform simple arithmetic operations but it uses external programs C shell operator more like C 注意不同shell支持的东西不同(zsh好怪奥) Relational Operators: example compare operator | operator | meaning | | - | - | | -eq | == | | -ne | != | | -gt | &gt; | | -lt | &lt; | | -ge | &gt;= | | -le | &lt;= | Boolean Operators: exampel operator meaning ! NOT -o OR -a AND String Operators: operator meaning = == != != -z size is zero -n size is not zero str return false if is empty useage [ $a ] cut: - {$str#char}:get rest string without the char File Test Operators [[https://www.tutorialspoint.com/unix/unix-file-operators.htm|example]] if-else if…then…fi if…then…else…fi if…then…elif…else…fi switch 1234567891011case $foo in Foo) echo &quot;Foo&quot; ;; Bar) echo &quot;Bar&quot; ;; *) echo &quot;Other&quot; ;;esac","categories":[{"name":"Shell Script","slug":"Shell-Script","permalink":"http://blog.vollate.top/categories/Shell-Script/"}],"tags":[{"name":"Notes","slug":"Notes","permalink":"http://blog.vollate.top/tags/Notes/"}]},{"title":"pack-appimage","slug":"pack-appimage","date":"2024-04-20T03:28:18.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"2024/04/20/pack-appimage/","permalink":"http://blog.vollate.top/2024/04/20/pack-appimage/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"编译之法","slug":"compile-knowledge","date":"2024-03-03T10:34:06.000Z","updated":"2024-04-29T07:08:05.767Z","comments":true,"path":"2024/03/03/compile-knowledge/","permalink":"http://blog.vollate.top/2024/03/03/compile-knowledge/","excerpt":"","text":"以 C/C++ 为例，简单介绍一下 Linux 下编译的相关知识。看完应该能掌握基础的编译能力，处理报错不再抓瞎。 麻麻再也不用担心我遇到问题只能瞎逛 stackoverflow 了 该逛还得逛 基础知识 编译型语言与解释型语言 编译型语言是将代码直接编译成机器可以直接执行的机器码，可以直接在目标机器上执行。代表是 Fortran, C, C++, RUST, Go 等。 解释型语言是通过解释器逐行解释每条命令来执行对应的操作，运行不需要编译，但是需要对应的解释器解释成对应架构的指令。代表是 Python, ECMAScript, PHP 等等。 也还有一些两者兼具的，如 JAVA，编译成字节码，然后由 JVM 解释执行。 汇编语言 汇编语言是最接近于机器码的语言，和目标机器的指令集架构紧密相关也称为低级语言。指令集是一种抽象，它将计算机的物理实现抽象成指令集规定的一系列操作，使得同一架构的不同型号计算机能运算同一个程序，且规定了程序如何操作硬件完成计算。汇编之所以成为最接近于机器码的语言，是在于它只需要进行简单的替换就能生成对应的机器码。 举个 MIPS32 架构汇编的例子： add $1,$2,$3 这条指令将2和3号寄存器的值相加存储到1号寄存器中，根据 MIPS32 的转换规则，生成的二进制机器码如下: opcode rs rt rd shamt func 000000 00010 00011 00001 00000 100000 操作码（opcode）：对于 add 操作，它的操作码是 000000。 源寄存器2（rs）：$2 对应的寄存器是 00010。 源寄存器3（rt）：$3 对应的寄存器是 00011。 目标寄存器（rd）：$1 对应的寄存器是 00001。 移位量（shamt）：对于 add 操作而言，不涉及移位，因此为 00000。 功能码（funct）：add 操作的功能码是 100000。 汇编语言经过简单的处理就可以直接转换为机器码，但是有许多坏处: 可读性差。以下是一个 clang 生成的简单的 hello world 程序的汇编代码 12345678910111213141516171819202122232425262728293031323334353637 .text .file &quot;test.c&quot; .globl main # -- Begin function main .p2align 4, 0x90 .type main,@functionmain: # @main .cfi_startproc# %bb.0: pushq %rbp .cfi_def_cfa_offset 16 .cfi_offset %rbp, -16 movq %rsp, %rbp .cfi_def_cfa_register %rbp subq $16, %rsp movl $0, -4(%rbp) leaq .L.str(%rip), %rdi movb $0, %al callq printf@PLT xorl %eax, %eax addq $16, %rsp popq %rbp .cfi_def_cfa %rsp, 8 retq.Lfunc_end0: .size main, .Lfunc_end0-main .cfi_endproc # -- End function .type .L.str,@object # @.str .section .rodata.str1.1,&quot;aMS&quot;,@progbits,1.L.str: .asciz &quot;Hello, World!\\n&quot; .size .L.str, 15 .ident &quot;clang version 16.0.6&quot; .section &quot;.note.GNU-stack&quot;,&quot;&quot;,@progbits .addrsig .addrsig_sym printf 汇编中没有我们常用的控制流，需要手写判断跳转的操作 2. 可移植性差，只使用于特定架构的计算机。如果你想要你的汇编程序同时在 arm64 和 x86_64 上运行，你需要写两份代码。 3. 其他就不一一列举了…… 函数声明和定义 在编程中，我们用函数来表示一种特定的操作，它能够处理我们的输入并且产生对应的输出(副作用)。想深入了解可以看看λ演算，这里就不过多介绍了。函数能够简化我们的代码，对于需要在多处重复执行的操作，我们通过将他包装成函数来简化我们的代码。 函数的声明就是告诉编译器我们有这么一个叫xxx的函数，它的输入和输出都是什么类型。定义则是具体描述了函数如何处理输入最终得到输出。 在编程中，函数往往是声明和定义分开，来将逻辑和函数解耦。在 C/C++ 中，我们通常使用 #include 预处理命令来引用头文件，头文件中包含了函数声明。预处理器会直接将被 include 的文件内容复制到预处理后的文件对应位置中。 编译过程 编译器是一种计算机程序，它会将某种编程语言写成的源代码转换成另一种编程语言。主要用途是将便于人编写、阅读、维护的高级计算机语言所写作的源代码程序，翻译为目标机器能解读、运行的低阶机器语言的程序。将高级语言转化为低级语言的过程称为编译，反过来成为反编译。 一般编译的过程分为如下步骤: 预处理: 进行文本替换等其他操作，如 C/C++ 里 “#xxx” 预处理命令的展开以及宏的替换 编译：将源代码转换为对应架构的汇编代码，生成.s汇编文件 汇编：将上一步生成的汇编代码翻译成二进制机器码，生成.o object 文件 链接：将上一步生成的文件和所需要的静态/动态库链接为一个新的 object 文件 注意不是所有语言的编译都有上述的几个部分，如 JAVA 。 静态链接和动态链接 我们可以通过声明让在多个地方使用函数而只需提供一次定义，同理，多个文件可以共用同一个函数，只需要链接包含了函数定义的 library 即可，无需重复编译。链接方式有如下两种: 静态链接：将被链接的库的所有代码嵌入到新的可执行文件或目标文件中。 优点：生成的可执行文件不需要依赖外部库 缺点： 生成文件变大 如果被链接的库更新，需要重新编译 无法重复利用共享库 动态链接：在程序运行时或运行前的装载阶段将外部库代码加载到内存中的过程。可执行文件只包含对这些库的引用，不包含实际的库代码 优点： 可执行文件可以更小 多个可执行文件可以复用同一个 lib 如果更新不改变函数接口，则无需重新编译 缺点： 会依赖外部库，如 linux 的 glibc。如果版本不兼容，运行时会报错。 启动时会略微增加时间 动态链接库 .dll (Dynamic link library)是 Windows 下的的称呼，在 Unix/Linux 下称为 Shared Object .so，本文会统一叫动态链接库(叫顺口了)。 Linux 下，静态链接库一般以 .a 结尾 (archive) gcc/clang 使用 本章主要介绍在命令行中使用 gcc/clang 进行编译的的过程和注意事项，以下命令中的 clang 都可以换成 gcc。但是注意，不同编译器所支持的编译参数并不完全相同，因此项目中需要对不同的编译器进行不同参数的适配。 获取帮助 man clang，man 是 Linux 下的一个 reference 页面，安装的程序可以以一定格式提供 manual 供 man 命令调用。man 使用 vim 的键位，按 / 建开始搜索，n 建下一个，N 键上一个，按 q 键退出。你可以使用 man man 来查看 man 的 manual，如果你只想获得简单的帮助，请使用 clang --help 编译一个文件，生成可执行文件 test.c clang test.c -o test 注意，在 clang/gcc 默认使用 “main” 作为主函数的入点，如果你的文件中没有 main 函数，编译会报错，因为编译器没有找到主函数入口。这里我们使用 “-o” 指定输出文件名称，如果不指定，默认为 “a.out” 编译一个库 mBool.c 123456789# static libclang -c mBool.c -o mBool.o # 这里不写默认生成同名后缀为.o的对应文件ar r mBool.a mBool.o # for GNU toolchainllvm-ar r libmBool.a mBool.o # for llvm toolchain# ar 将所有(这里只有一个) .o 文件打包，并创建一个索引表以供查找。某些情况，会选择性对文件进行压缩# shared libclang -shared mBool.c -o libmBool.so -fPIC# 上述动态链接库的编译过程中使用了 `-fPIC` 这个参数，意味着生成 position independent code，这样我们的动态链接库就可以在任意地址被装载。 链接一个库 mBoolTest.c 这里我懒得写头文件了，直接前置声明了 123456789101112# link the static libclang -o mTest.out mBoolTest.c `pwd`/mBool.aclang -o mTest.out -static mBoolTest.c -L`pwd` -lmBool # if no shared lib, &quot;-static&quot; is uneeded# link the shared libclang -o mTest.out mBoolTest.c -L`pwd` -lmBool# ref:# -L$&#123;target_lib_path&#125;# -l$&#123;lib_name&#125; # compiler will try to find lib$&#123;lib_name&#125;.a/so# -l:$&#123;custom_lib_name&#125;# -static # use static link 对于静态链接库，我们直接将其作为输入即可链接，因为其本质上就是一个编译后生成的二进制文件 .o 对于动态链接库，编译器会有一些系统默认的动态库目录，它会进入目录下查找。显然我们当前的文件夹并不在此之列，因此为了让编译器进入我们当前的目录下查找链接库，我们使用 -L 来加入我们库所在的目录来让编译器查找。我们之前将编译出来的库命名为 “libmBool.*”，因此可以直接使用 -l 来链接我们的库。因为我们的目录下同时存在静态和动态链接库，因此编译器默认使用动态链接。我们可以使用 -static 来让编译器使用静态链接库。 使用 -rpath/-runpath 现在我们尝试运行我们刚刚链接完动态链接库的可执行文件，然后就报错了 ./mTest.out: error while loading shared libraries: libmBool.so: cannot open shared object file: No such file or directory 系统提示我们找不到动态链接库。因为我们没有存储动态链接库的位置，动态链接器(如 ld-linux.so)不知道去哪加载我们的动态链接库我们使用 -rpath 来存储动态链接库的目录信息。可以使用绝对路径或相对路径，一般使用相对路径，这样程序只要保持文件内的结构不变即可在各处执行。注意，这个参数是加给链接器的，clang 可以直接传递给链接器，但是 gcc 需要使用 -Wl 来传递给链接器。runpath 和 rpath 相比，更新，一些老旧的动态链接器可能不支持，但是提供了更多的灵活性，具体下面会讲到。 1234567891011121314# use relative pathclang -o mTest.out mBoolTest.c -L`pwd` -lmBool -rpath . # clang could ignore the -Wl for rpath, but gcc can&#x27;tclang -o mTest.out mBoolTest.c -L`pwd` -lmBool -Wl,-rpath . # also worksgcc -o mTest.out mBoolTest.c -L`pwd` -lmBool -Wl,-rpath .# use absolute pathclang -o mTest.out mBoolTest.c -L`pwd` -lmBool -rpath `pwd`clang -o mTest.out mBoolTest.c -L`pwd` -lmBool -Wl,-rpath `pwd`# use runpathclang -o mTest.out mBoolTest.c -L`pwd` -lmBool -Wl,--enable-new-dtags -Wl,-rpath . # gcc paremeter is the same# force use rpath(disable runpath)clang -o mTest.out mBoolTest.c -L`pwd` -lmBool -Wl,-rpath . -Wl,--disable-new-dtags 引用头文件 现在我们不偷懒了，引入一个头文件 head.h，创建一个 nMBoolTest.c，假设头文件存储在目录 /tmp 下，我们要让编译器知道我们头文件的位置，使用 -I 选项 clang -o nTest.out nMBoolTest.c -L`pwd` -lmBool -rpath `pwd` -I/tmp 使用环境变量 假设我们没有 make，cmake 这样的自动化构建工具，或者有一个复杂无比的 Makefile/CMakeLists.txt，无法轻易更改。我们需要让编译器知道我们自定义的 header 和 lib 的位置，这时候就需要我们的环境变量登场了。下面介绍一些常用的，更多的看对应编译器的文档，GCC C_INCLUDE_PATH：阅读理解（ C_PATH：same as above CPLUS_INCLUDE_PATH：阅读理解（ LIBRARY_PATH：告诉链接器库的位置，链接时会进入该目录搜索 LD_LIBRARY_PATH: 告诉动态链接器库的位置，运行时会进入该目录搜索 以上写法写法同 PATH，用 : 分隔每个路径 ld.so(动态链接器) 搜索顺序: 编译时设置的 rpath 路径 环境变量 LD_LIBRARY_PATH 编译时设置的 runpath: runpath 的搜索优先级低于 LD_LIBRARY_PATH，因此它可以允许用户设置 LD_LIBRARY_PATH 来覆盖 runpath 指定的库，提供更多的灵活性。而 rpath 则不行。当然，这也意味着有可能会无意间使用不同版本的库，造成一些问题。 缓存文件(如 /etc/ld.so.cache): 包含了当前环境中可用库的索引，可以使用 ldconfig 来更新 默认路径，如 “/lib”, “/usr/lib” 等等 常用编译选项: -g: generate debug info -O0, -O1, -O3, -Ofast: 设置编译器优化等级，等级越高优化越多。O0无优化，Ofast 启用O3的同时使用一些不符合 ISO 标准的优化 -v：输出执行的命令 -x：显示指定语言类型 -std=：指定语言标准 -Wall：将所有 warning 当作 error -Wno-deprecated：如果使用了编译器被弃用的功能，不要产生 warning -Wno-deprecated-declarations：不要对使用 C++ 中的 [[deprecated]] 修饰的对象产生 warning -mx32：生成32位x86代码 -stdlib=：指定使用的标准库 -E：只进行预处理 -S：生成汇编代码后停止 -c：编译或汇编对象文件，但不链接 more: read the manual 常见问题解决 报错了：学会看报错，报错是帮你解决问题的，看不懂把报错扔搜索引擎上多半能出来(注意不要复制过多本地环境的无效信息) 心态崩了：缓上个半天继续整 完","categories":[{"name":"Compiler","slug":"Compiler","permalink":"http://blog.vollate.top/categories/Compiler/"}],"tags":[{"name":"Knowledge","slug":"Knowledge","permalink":"http://blog.vollate.top/tags/Knowledge/"}]},{"title":"Arch Linux 下 firefox 无法显示 emoji","slug":"missing-emoji","date":"2024-02-20T16:11:59.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"2024/02/20/missing-emoji/","permalink":"http://blog.vollate.top/2024/02/20/missing-emoji/","excerpt":"","text":"问题描述 firefox 无法显示任何 emoji，但 chrome，edge 均显示正常 折腾过程 首先怀疑是 firefox 什么地方配置炸了。搜了几篇提问，解决方案都无效，包括 Arch wiki 上的这个。 然后我开了下自己另一台电脑上的 Arch 发现显示正常，于是推断可能是缺字体。具体是什么不清楚，但是包名中大概带 “emoji”。搜了半天没找到个能用的解决方案，noto-font-emoji 装了也没用。最后不抱希望搜了下package，原以为会出现一堆带 emoji 的，结果就十几个。看了看，觉得缺少 “unicode-emoji” 的可能性最高，装了，好了。 然后发现 vim 中的 warning 字体突然变成 unicode 里面那个黄色 warning（丑），于是又把包卸了。重启后发现 firefox 中 emoji 正常显示，大概是本地哪个配置文件炸了一开始才显示不了。 总结 人生 -1h 强迫症满足++ 折腾 Linux 经验++","categories":[],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://blog.vollate.top/tags/Journal/"}]},{"title":"Linux 下系统代理配置","slug":"linux-system-proxy","date":"2024-01-09T15:57:33.000Z","updated":"2024-04-29T07:08:05.771Z","comments":true,"path":"2024/01/09/linux-system-proxy/","permalink":"http://blog.vollate.top/2024/01/09/linux-system-proxy/","excerpt":"","text":"配置 firefox 系统代理时出现了一些问题，然后查了下 Linux 桌面系统代理的原理，记录一下 系统信息: 12345678OS: Arch Linux x86_64 Kernel: 6.6.10-arch1-1 Packages: 1369 (pacman) Shell: zsh 5.9 DE: Plasma 5.27.10 WM: KWin Theme: [Plasma], Canta-dark [GTK2/3] Icons: Tela-circle-manjaro-dark [Plasma], Tela-circle-manjaro-dark [GTK2/3] 使用 clash-verge 进行代理，然后 system-proxy 设置为 manual 后 edge 和 chrome 能正常识别。但是 firefox 死活不行，上网查了不支持代理的问题是11年前的。 无奈开始怀疑是 firefox 不支持 KDE 桌面环境的系统代理设置。 KDE 系统代理配置 如上图，配置好后，系统代理的信息可以在 ~/.config/kioslaverc 中找到 GNOME 系统代理配置 GNOME 桌面同样可以通过 GUI 配置系统代理，具体不展示了因为没 GNOME 桌面(全用Arch导致的。GNOME 下桌面应用可以通过 gsettings 来获取对应的 key 值，如 gsettings get org.gnome.system.proxy mode 可以获取现在的系统代理模式。 解决问题 发现 clash-verge 内置的系统代理配置的是 gsettings 的选项，而且 firefox 只认 GNOME 的系统代理配置(Mozilla 快把 firefox 玩死了)。因此之前一直没有成功。Ubuntu 用户太多导致软件适配倾向于 GNOME 桌面，但是真的好丑啊 GNOME。 小贴士：一般桌面 app 不吃 env variable 这一套","categories":[{"name":"Linux","slug":"Linux","permalink":"http://blog.vollate.top/categories/Linux/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://blog.vollate.top/tags/Journal/"}]},{"title":"VPS 测试脚本整理","slug":"vps-testscripts","date":"2023-12-13T07:44:50.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"2023/12/13/vps-testscripts/","permalink":"http://blog.vollate.top/2023/12/13/vps-testscripts/","excerpt":"","text":"整理自知乎 基础测试(IO+网速) Bench wget -qO- bench.sh | bashcurl -Lso- bench.sh | bashwget -qO- 86.re/bench.sh | bashcurl -so- 86.re/bench.sh | bash SuperBench 会安装较多东西，测得也较全，并且网络测速注重回国速度 wget -qO- --no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superbench.sh | bashcurl -Lso- -no-check-certificate https://raw.githubusercontent.com/oooldking/script/master/superb Superseed 提供测试全国各地三大运营商速度 wget https://raw.githubusercontent.com/oooldking/script/master/superspeed.sh &amp;&amp; chmod +x superspeed.sh &amp;&amp; ./superspeed.sh UnixBench 主要测试项目有：系统调用、读写、进程、图形化测试、2D、3D、管道、运算、C库等系统基准性能提供测试数据，发布页 wget --no-check-certificate https://github.com/teddysun/across/raw/master/unixbench.shchmod +x unixbench.sh./unixbench.sh Memory Test 123456789101112#CentOS / RHELyum install wget -yyum groupinstall &quot;Development Tools&quot; -ywget https://raw.githubusercontent.com/FunctionClub/Memtester/master/memtester.cppgcc -l stdc++ memtester.cpp./a.out#Ubuntu / Debianapt-get updateapt-get install wget build-essential -ywget https://raw.githubusercontent.com/FunctionClub/Memtester/master/memtester.cppgcc -l stdc++ memtester.cpp./a.out","categories":[{"name":"Server","slug":"Server","permalink":"http://blog.vollate.top/categories/Server/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://blog.vollate.top/tags/Journal/"}]},{"title":"折腾网站记录","slug":"build-site","date":"2023-12-13T04:02:27.000Z","updated":"2024-04-29T07:08:05.767Z","comments":true,"path":"2023/12/13/build-site/","permalink":"http://blog.vollate.top/2023/12/13/build-site/","excerpt":"","text":"原来的 vps 到期了，不想续费新开了一台，忘了全系统备份。索性 blog 扔到 github page,然后又是一顿折腾。 Github Action 样例 改了改 Hexo 官网的: 1234567891011121314151617181920212223242526272829name: Blogon: push: branches: - mainjobs: pages: runs-on: ubuntu-latest permissions: contents: write steps: - uses: actions/checkout@v3 with: token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; submodules: true - name: Use Node.js 18.x uses: actions/setup-node@v2 with: node-version: &quot;18&quot; - name: Install Dependencies run: npm install - name: Build run: npm run build - name: Deploy uses: peaceiris/actions-gh-pages@v3 with: github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125; publish_dir: ./public Github Action 禁用 jekyll build 因为要用 peaceiris/actions-gh-pages@v3 进行部署，但是用的 Hexo 且已经在先前的操作编译完成，只需部署到对应分支即可。 一开始不知道 debug 了半天 解决方法在仓库里创建一个.nojekyll文件即可, 这会自动禁用 jekyll build 而只执行 deploy (部署编译好的文件到对应分支) 使用cf后无限redirect 在 namesilo 买的域名，突发奇想试试用 Cloudflare 免费计划的域名解析（为了CDN） 配完后炸了，http 请求返回 301 导致无限 redirect，查了下原因如下： 服务器端使用了强制HTTPS，CloudFlare 的Flexible策略原理是：用户访问时使用HTTPS访问到CF的节点，然后CF通过HTTP方式回源到你的服务器去读取数据，这个时候对于你的服务器来说，CF就是访客，所以服务器返回的状态都是 301。解决方法很简单，将 SSL 策略设为 Full 或者 Full(strict) 就能解决。 Vanishvzone.me/897 不要给网盘套 cf 的 cdn cf 的 cdn 有单文件100M 大小限制，为了不被滥用。写 dns 的时候脑子抽了，然后虚空 debug nginx 配置文件。 上大学上的.jpg","categories":[{"name":"Blog","slug":"Blog","permalink":"http://blog.vollate.top/categories/Blog/"}],"tags":[{"name":"Journal","slug":"Journal","permalink":"http://blog.vollate.top/tags/Journal/"}]},{"title":"浅记系统虚拟化","slug":"virtualization","date":"2023-11-17T11:24:06.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"2023/11/17/virtualization/","permalink":"http://blog.vollate.top/2023/11/17/virtualization/","excerpt":"","text":"最近由于项目需要学习虚拟化的知识，于是在师兄的建议下读了 sjtu 出的新书《操作系统原理与实践》中的系统虚拟化的部分，随便记点笔记。 虚拟化发展历史: 1960s出现分时操作系统概念。同时期IBM进行了另一个方向也就是虚拟化的探索，并在1968年的system360上实现了第一个VMM(Virtual Machine Monitor) CP/CMS 1980s，开始出现纯软件实现的虚拟机监视器 1990s, 互联网兴起，web服务器逐渐性能过剩 1998年，VMware成立。 云计算兴起，虚拟化越发重要 优势: 充分利用服务器性能，搞超售 虚拟机管理更为便捷，可以快速部署销毁 可以热迁移 VMI (Virtual Machine Introspection 虚拟机自省)可以从外部检查虚拟机是否被入侵 系统虚拟化概述 组成部分 CPU 虚拟化（vCPU）：若虚拟化的指令集和物理架构指令集相同，除了部分特殊指令其他都可以直接执行，效率较高（KVM）；若架构不同，则需要全部转译执行。 内存虚拟化：引入虚拟物理地址，内存访问需要多经过一层虚拟物理地址到物理地址的映射操作。 I/O 虚拟化：VMM 提供虚拟驱动供虚拟机使用，并将操作转化为实际的物理设备访问或其他操作。 VMM 类型 半虚拟化: 运行在最高权限级别，相当于一个以OS作为进程的操作系统，如 Xen。 完全虚拟化：作为一个进程运行在 OS 上，复用宿主OS的线程调度和资源管理，如 QEMU。 Trap-Emulate（下陷-模拟） Trap：将系统级ISA拦截转由 VMM 进行模拟操作。如系统调用先转化为虚拟机内核态，然后由 VMM 拦截并完成对应调用的模拟。 Emulate：用软件模拟执行后的副作用 基础概念: CPU 上下文：指CPU在执行特定进程或任务时所需的信息集合。一般包括该CPU的所有寄存器（包括PC）的值和当前系统状态（内存信息，调度优先级等）。 中断向量表（Interrupt Vector Table）：存放中断处理函数。 中断处理过程：触发中断时，首先检查中断是否开启。若开启，CPU 接收中断信号并暂停当前程序处理。然后保存当前上下文以供恢复。然后确定中断类型并从中断向量表中查找对应处理函数的地址并跳转执行。执行结束后，恢复中断前的上下文。 用户态：用户态是普通应用程序运行的模式。该模式下，程序对硬件的访问受限，一般通过OS提供系统调用切换到内核态来执行对应函数进行访问。 内核态：OS 一般运行在该状态下。该状态下，OS 能够完全访问并操作硬件，访问所有内存。 Trap-Emulate 虚拟化实现 VMM 需提供数据结构，来存储原本存储在物理 CPU 上的所有进程上下文信息，以及对应的其它信息（如中断向量表,虚拟页表等）。 处理中断：对于硬件中断，将会触发 VMM 查看虚拟机是否开启对应中断。如开启，虚拟机保存上下文后下陷到 VMM，然后 VMM 检查中断向量表处理中断。 处理系统调用：同中断处理的模式，只是 VMM 需要隔离用户态和内核态的页表映射 处理线程切换：本质软件中断到内核态然后进行线程调度，切换进程上下文即可。 多 CPU 模拟：加个数据结构存进程上下文和 vCPU 的对应关系就行。vCPU 调度参考 OS 的进程调度，或者直接用线程 OS 进程来实现。 CPU虚拟化 特权指令：在用户态执行时会下陷进入特权级的指令 敏感指令：管理物理硬件资源或更改CPU状态的指令 eg： x86 修改 CR 寄存器的值 读写敏感内存 I/O 指令 可虚拟化和不可虚拟化架构 所有满足敏感指令都是特权指令的架构称为可虚拟化架构，反之则为不可虚拟化架构。 eg: AArch32 早期 x86 弥补不可虚拟化架构的方法 全虚拟化 适用于无需修改客户端源码的情况 解释执行：用纯软件模拟cpu执行指令过程。具体操作是对于每条指令调用对应的用于模拟的函数，整个过程不产生任何下陷。优点是可以模拟任何 ISA 类型的虚拟机。缺点显而易见，效率低下。 动态二进制编译：在解释执行的基础上将程序划分为只有一个入口和一个出口,中间无任何修改控制流指令的代码块(相当于创建了一个函数)。第一次执行该块时进行翻译并缓存，之后再执行时调用之前的缓存。翻译替换所有敏感指令，在块的末尾添加一条跳转指令来通知 VMM 执行完毕。 扫描-翻译：用于虚拟机架构和宿主相同的情况，在程序执行前扫描可能存在敏感指令的代码，翻译并缓存翻译后的代码以便下次复用。大多数情况敏感指令只存在于 OS kernal 中，可以只扫描内核代码。 半虚拟化 在允许修改虚拟机客户端代码的情况下可以使用 原理：通过 VMM 提供的类似系统调用的服务使得虚拟机内核不再需要下陷模拟，而是类似进程使用系统调用一样进行对应操作，效率更高。半虚拟化使得 VMM 获得查看客户端内存分布的能力，能够更合理的分配资源。 硬件虚拟化 通过 CPU 硬件支持来实现更高效的虚拟化。具体来说就是增加一个专为 VMM 运行的特权级，该特权级下 VMM 拥有和宿主 OS 相同的硬件访问权限，来节省下陷的开销。 拓展——KVM (kernal-based virtual machine) 技术: 通过将 VMM 作为内核模块加载使得 VMM 能够使用 宿主 OS 内核的功能，这样下陷时某些支持的架构可以消除 KVM 到 OS 内核特权级转换带来的开销。指令无需翻译，直接在硬件上执行，使得虚拟化效率接近直接运行。 内存虚拟化 目标：实现虚拟机之间，虚拟机和物理机之间的内存隔离 术语： GVA: Guest Virtual Address GPA: Guest Physical Address HPA: Host Physical Address 影子页表(Shadow Page Table) 复习进程页表的配置&amp;使用： 调用前 OS 为进程配置一个虚拟地址映射到物理地址的静态页表（相对地址） OS 将页表基地址写入对应寄存器以让 MMU 能找到页表 MMU 解析虚拟地址到物理地址 内存虚拟化中，VMM 需要根据存储的 GPA 到 HPA 的映射信息并生成一个 GVA 到 HPA 的影子页表。在虚拟机下陷时,将页表基地址替换为影子页表基地址，从而让 MMU 直接解析 GVA。 VMM 需要监视虚拟机对页表的更改，并对应地修改影子页表。同时为了分隔用户态和内核态，需要分离对应的页表，使得用户态页表中不包含内核态的映射 缺页处理： 若为页表项不存在或无权限，VMM 需触发宿主 OS 的缺页中断进行处理 若为访问权限足够，则需要同步影子页表与虚拟机页表 直接页表映射 客户端与宿主共用页表。该情况下客户端知道自己处在虚拟环境中，VMM 会告知客户端可以使用的页表范围，方便客户端规划。客户端的页表项被设为只读，修改页表需要使用 VMM 提供的超级调用，该调用会检查对页表的修改是否合法。 两阶段地址翻译 硬件虚拟化的一部分，需要 CPU 支持使用第二页表将 GPA 转换到 HPA，省去 VMM 手动维护影子页表的步骤。同时可以使用 TLB 来优化解析速度。 缺页中断处理： 客户虚拟机缺页：无需下陷，硬件直接调用虚拟机注册的中断函数 第二阶段页表缺页：下陷，硬件直接调用 VMM 注册的的对应中断函数 优点： 不用维护影子页表 不用为每个进程维护一个页表 缺页处理更快 换页和内存气球 目的：运行时动态调整虚拟机内存大小，内存超售 换页逻辑： 保存将要交换的页的 GVA 和 GPA 交换页内数据到持久化存储设备（硬盘什么的） 将客户端页表项设为 INVALID VMM 重新分配该页 内存气球(Memory Ballooning)：在客户端插入一个驱动(内鬼)，该驱动根据 VMM 的要求使用虚拟机的接口申请/释放内存，然后将申请的内存物理地址告诉 VMM 来使用。 I/O虚拟化 限制虚拟机对物理硬件的直接访问 提供虚拟设备接口 充分利用I/O 软件模拟（全虚拟化） 捕获客户端对虚拟硬件的 MMIO, DMA, 中断，下陷后由 VMM 执行对应操作 半虚拟化 类似全虚拟化，客户端不再使用原生驱动而是前端驱动，用于与 VMM 后端驱动交互。 通过内存共享传递数据，并使用批处理加速，由后端驱动完成和物理硬件的交互。 设备直通 让客户端直接管理硬件设备，此时操作对应硬件不会产生任何下陷。为防止 DMA 攻击使用 IOMMU 进行二阶段 GPA 到 HPA 的映射并检查对应权限。 SR-IOV(single root I/O virtualization):实现硬件层面 IO 虚拟化，避免单一虚拟机独占硬件。通过创建多个 VF （virtual function） 让 VMM 分配给虚拟机使用 中断虚拟化 两种中断： 物理中断：由硬件产生，在非直通情况下由 VMM 处理 虚拟中断：由 VMM 产生 解决开关中断下陷的问题：增加可供虚拟机修改中断而无需下陷的虚拟寄存器 直接向虚拟机发送中断：增加一个中断翻译表，用于将物理中断翻译为虚拟机对应的中断。因此无需再进行下陷。 QEMU/KVM 略","categories":[{"name":"OS","slug":"OS","permalink":"http://blog.vollate.top/categories/OS/"}],"tags":[{"name":"Notes","slug":"Notes","permalink":"http://blog.vollate.top/tags/Notes/"}]},{"title":"More Effecitve C++","slug":"more-effecitve-cpp","date":"2023-11-08T08:21:57.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"2023/11/08/more-effecitve-cpp/","permalink":"http://blog.vollate.top/2023/11/08/more-effecitve-cpp/","excerpt":"","text":"不能直接往数组类容器塞多态类，使用指针；一定要引用的情况下（需要operator()）用std::reference 直接创建数组或用vector,array等容器预先分配大小时调用类的无参(默认)构造函数，因此如果用了explict记得声明无参构造函数 1234567//没有无参构造函数解法（别用）class Ex;void* ptr=operator new[](10*sizeof(Ex));for(int i=0;i!=10;++i) new (&amp;ptr[i]) Ex(...);//call constructor//Free memoryoperator delete(ptr); custom i++&amp;++i for class class foo;int foo operator++();//++iconst int foo operator++(int);//i++ 尽可能不重载 &amp;&amp;,|| and ,，因为不满足短路逻辑 有关new, new[],delete,delete[] new时，先调用void* operator new(size_t size)分配内存,然后初始化对象并且将void*转型为对应类型指针 operator new 的一个重载:void* operator new(size_t size, void* loaction) 定位new实现 delete时，先调用析构函数然后operator delete 释放内存 对数组: new []调用operator new[]()分配内存,然后为每个对象调用构造函数 delete[]同理 构造函数异常处理(未完全构造函数不会栈解退自动析构): 使用try catch进行清理 防止成员列表初始化const pointer异常导致资源泄漏的方法(未完全构造指针无法使用delete): 调用一个basic exception guarantee的函数 使用RAII类 异常 异常栈解退时调用析构函数再抛出异常将会导致程序直接终止(call terminate directly kill program) 异常拷贝时按照静态类型拷贝(派生类的基类引用拷贝为基类) 异常捕获的支持隐式转型(按指): 任何指针to void*(极其不建议用指针) 派生类转基类 总是按catch先后顺序捕获 按引用捕获可以实现多态 Improve proformance: lazy evaluation: 返回一个结果的代理类，只有在需要时才进行计算 lazy copy： 写时复制 lazy fetch：涉及到数据库的部分 over-eager evaluation：提前计算并存入缓存，或constexpr编译期计算 临时对象: 仅在按值传递对象或者传递常量引用参数时产生。返回对象时，若直接返回则会拷贝局部对象 返回值优化: 返回构造函数的参数，这样返回的对象会在返回的作用域构造(编译器优化) 判断类是否在堆中(为了确定能否调用delete this)：重载operator new,operator new[],记录返回的指针到一个图中，每次删除前进行查找是否在堆上 适当使用代理可以简化流程，但是会在隐式转型的地方出错 类型擦除:使用虚基类(接口) double dispatch:(针对不同动态类型的多个object产生不同副作用) 虚函数 + RTTI：无封装，可维护性为0 多重虚函数调用: 类似模板递归展开的手动实现，每次确定一个类型，然后调用下一个虚函数 手动实现虚函数表","categories":[{"name":"C++","slug":"C","permalink":"http://blog.vollate.top/categories/C/"}],"tags":[{"name":"Notes","slug":"Notes","permalink":"http://blog.vollate.top/tags/Notes/"}]},{"title":"CPP 随笔","slug":"cpp-essay","date":"2023-11-03T03:20:31.000Z","updated":"2024-04-29T07:08:05.771Z","comments":true,"path":"2023/11/03/cpp-essay/","permalink":"http://blog.vollate.top/2023/11/03/cpp-essay/","excerpt":"","text":"记录cpp编程过程中的一些总结 clang + libstdc++ debug 问题 众所周知 LLVM 的 libc++ 和 GNU 的 libstdc++ 是两个不同的标准库实现。虽然使用 clang + libstdc++ 编译也可以使用 LLDB 对程序进行 debug，但是字符串以及一些数据结构如 unordered_map 无法正确显示值。解决方式: 使用编译选项 “-fstandalone-debug” 在编译和链接时换为 libc++, cmake 中可以使用 set(CMAKE_CXX_FLAGS &quot;$&#123;CMAKE_CXX_FLAGS&#125; -stdlib=libc++&quot;) 来解决。 cheatsheet: cmake 中切换到 llvm 全套 C++ 工具链 if(&quot;$&#123;CMAKE_CXX_COMPILER_ID&#125;&quot; STREQUAL &quot;Clang&quot;) set(CMAKE_CXX_FLAGS &quot;-stdlib=libc++&quot;) set(CMAKE_EXE_LINKER_FLAGS &quot;-fuse-ld=lld&quot;)endif ()","categories":[{"name":"C++","slug":"C","permalink":"http://blog.vollate.top/categories/C/"}],"tags":[{"name":"Notes","slug":"Notes","permalink":"http://blog.vollate.top/tags/Notes/"}]},{"title":"Effective C++","slug":"effective-cpp","date":"2023-10-05T08:03:48.000Z","updated":"2024-04-29T07:08:05.771Z","comments":true,"path":"2023/10/05/effective-cpp/","permalink":"http://blog.vollate.top/2023/10/05/effective-cpp/","excerpt":"","text":"从vimwiki迁移过来的古早笔记,仔细看看发现好多忘了( Items from 1 to 55 将cpp看作C，面向对象的cpp，模板和STL四个部分；根据各个部分的不同特性选择不同的编程方式 能用const，enum，inline就别#define 能用const就用const 确保类初始化后再使用 尽可能使用列表初始化(原因:operator= first call class’s default consturctor to allocate memory and get address, then do variable assigment) 避免初始化顺序问题（有关static初始化的问题） 知道默认构造，析构，复制构造函数 一旦创建移动构造||移动赋值操作符，不会生成默认复制构造&amp;&amp;复制运算符，反之亦然 小心使用默认生成的类函数 若要使用多态，则应将基类析构函数定义为virtual 不要让异常离开析构函数 不要在构造和析构函数中调用虚函数 也不是不能用，注意用的时候的类型是基类还是派生类（容易出问题所以不建议用） 重载运算符建议返回*this以便连等及其它操作 重载操作符时要考虑自己对自己操作的情况 处理方法： 先判断地址 拷贝后操作拷贝 拷贝（复制运算符）要完全复制类的内容（包括基类的） 要复用代码，不要相互调用复制构造函数，而是共同调用一个三方函数 RAII: use class to manage resource(unique_ptr &amp; share_ptr) RAII object have specified copy function 访问RAII class数据： 隐式：更方便 显示：更安全 成对使用对应的 new([]) &amp; delete([]) 单独创建智能指针 eg: A(std::unique_ptr&lt;B&gt;(new B), fuc()) 智能指针创建需要接受 new 返回的地址，而类构造函数执行顺序由编译器决定，如果fuc throw exception,会导致内存泄漏 设计良好的interface 尽可能不让用户写出出错代码 减少用户碰到管理内存的几率 shared_ptr总是使用指向类的析构函数，可以防止cross-DLL(object creat in a dynamic link library but delete in a differet DLL) 定义类就是定义类型，关注一些细节 尽量传const&amp;,对基础类型直接传值(iterator实现是指针，也算) 不要返回指向本地临时变量的指针 对用户隐藏数据，protected没比public包装好到哪去 不用访问data的就别搞成成员函数 类型转换需要非成员函数(friend) 创建合适的swap函数： 默认的std::swap执行三次拷贝构造-&gt;解决方案：构造wapper类使用指针来存储数据，交换仅交换指针，并且提供public的swap成员函数 如果该类不是模板类，需要具体化std::swap给该类;如果该类是模板类则在namespace中重写swap（模板函数） 调用规则：using + using std::swap，调用优先级为 模板swap&gt;具体化std::swap&gt;std::swap,因此记得using 和using std::swap 尽可能延缓变量的定义（看情况而定）好处： - 避免无用变量构造消耗时间（throw会导致无用 - 优化默认构造+复制构造为复制构造 尽可能不用cast，尤其dynamic_cast；必须要用，定义函数来隐藏cast（尽量避免用户自己cast）；少用c类型的转型, c++四种cast const_cast dynamic_cast reinterpret_cast static_cast static_cast子类转成父类时是产生一个子类中父类的临时拷贝，修改不会映射到原存储 cast要小心，搞清楚自己的目的 尽可能避免返回句柄[引用和指针] 指向栈中临时变量会寄掉 exception safety: No resource leak No data structures become coorupted exception safety function: Basic guarantee: after throw, everything in program remain valid Strong guarantee: after exception, the program status remain as if the fuction is never called Nothrow guarantee: never throw exception(hard to guarantee out of C part in C++) Strong guarantee implement: make a copy and modify the copy, then swap them in noexception way(But this need more resource and time, though it’s highly recommand, not always need to provide strong guarantee) 一般函数需要提供至少要有weak exception guarantee(at least no resource leak) inline function rules: limit inline function as small, frequently called functions. 内联别用模板 其它一些东西： 一般构造和析构函数不是内联 能不能内联主要看编译器 最小化编译依赖关系（通过声明）可以使用： handle class interface class: increase memory cost for virtual function table 编译时只需要重新链接函数就行 public inheritance means “is a”(noted that only public do this) 继承会隐藏父类（作用域）的变量和函数（当然名称空间也会{使用using解除隐藏 pure virtual function; virtual function;non-virtual function; 不要担心虚函数带来的损耗（大多数情况），也不要全是虚函数（一样） pure virtual function可以在类外提供实现，如此可以强制子类重写（算是强制注意吧）并减少代码重复 80~20rule:80% running time spend on 20% code 使用none virtual interface idiom 在基类以确保多态在何时调用函数 使用函数指针成员代替虚函数（好处：可以更改调用的函数(坏处：缺少对非public变量的访问权限 使用std::function成员代替虚函数 重定义非虚函数可能会使得多态出现意想不到的问题(从设计上来说就不应该重定义非虚函数) 默认参数值为静态绑定，不同于虚函数的动态绑定，不要在继承中改变默认值 has a &amp; implemented in terms of-- composition private inheritance当仅必要时 - both private inheritance and composition mean is-implemented-in-terms-of - composition is easy to understand - private inheritance can enable EBO - empty base optomize(EBO):当仅单继承且父类是空类时，子类大小等于数据大小(编译器优化 多继承尽量别用，用要考虑virtual 虚拟继承有损耗（比起单继承 多继承例子：public interface+private implementation 类和模板都支持多态 对于类，接口是明确的，多态出现在运行时 对于模板参数，接口是明确且基于合法的表达式的，多态出现在编译时（通过模板初始化和函数重载） typename和class可以互换 在不清楚的情况下，C++默认把typename(class):😗**看成变量而不是类型，使用 typename 告诉他这是个变量类型 访问模板基类函数的三种方法 使用 this 指针调用 using 指令 base&lt;T&gt;::**直接用 模板隐式具体化出的不依赖于模板参数的函数会导致程序膨胀 若由非类型参数导致，将模板参数换为函数参数或者类成员变量 若由类型参数导致，可以将数据转化为 无类型指针 eg: static_cast&lt;void*&gt; 然后统一调用 在模板类中使用模板成员函数来接受所有合法参数 eg: 同模板不同具体化类的实例化的复制构造函数和复制运算符 注意：即使声明了模板复制构造函数，也要声明一般的复制构造函数 我不知道他想说明啥 特化模板类使其对特定类型使用特定函数 通过 tyepid() 检查—wrong, can’t compile 由于不同的类型支持不同的函数，一些不支持的函数无法被编译（即使if else永远不会进入)编译过程要求所有代码合法 通过和函数重载(编译时) TMP(template metaprogramming) 将一部分运行时工作放到编译时进行 通过 set_new_handler(*new_handler) 自定义new的行为 typedef void (*new_handler)() declear in std, use as std::new_handler 通过连锁调用在失败后尝试其他 handler 分配内存，最后全部失败再throw bad_alloc 自定义类new的行为: modify void* operator new(std::size)throw(std::bad_alloc) and set_new_handler C++93前new分配失败会返回0，使用 new(std::nothrow) 来启用这一行为（只作用于内存分配时，初始化相关对象仍可能throw 重载new/delete操作符的几种情况 优化操作速度 收集内存使用信息 减少开头和末尾的内存占用 自定义内存对齐 将类集束摆放 其他未列出new行为 重载new和delete 重载new需要一个无限循环来分配内存，并在失败时调用 set_new_handler 或者分配0空间并throw 对于类类型，应该分配比预期更大空间 delete对nullptr什么也不做，对类类型应该删除比预期更大空间 重写new了记得重写delete，并且不要无意间隐藏了默认的new&amp;delete 注意编译警告，也不要过度依赖编译器 熟悉标准库，包括 STL(standard template library) Iostream Internationlization(like wchar_t,wstring) numeric provessing(valarray, complex) exception hierarchy C89 standard library tr1(2005,Technical report 1), add smartPointers,function pointers(tr1::function,std::function now)就是std::expermental::xxx Boost organization and Boost library This is just a begining, C++ learning will never end","categories":[{"name":"C++","slug":"C","permalink":"http://blog.vollate.top/categories/C/"}],"tags":[{"name":"Notes","slug":"Notes","permalink":"http://blog.vollate.top/tags/Notes/"}]},{"title":"Book List","slug":"book-list","date":"2023-09-18T04:18:11.000Z","updated":"2024-04-29T07:08:05.767Z","comments":true,"path":"2023/09/18/book-list/","permalink":"http://blog.vollate.top/2023/09/18/book-list/","excerpt":"","text":"Reading C++ Currency in Action Schedule Effective Modern C++ C++ Templates ed.2 Stash Deep learning Finished Name Finish date C++ Primer Plus 2021.12 Effective C++ 2022.7 1984 2022.6 沙丘 2022.6 资本论 2022.8.1 地铁系列(203[3,5]) 2022.9.25 More Effective C++ 2023.1.22 The Fast Guide towards Modern C++ 2023.7.15","categories":[],"tags":[{"name":"Books","slug":"Books","permalink":"http://blog.vollate.top/tags/Books/"}]},{"title":"Tool List","slug":"tool-list","date":"2023-03-27T00:17:41.000Z","updated":"2024-04-29T07:08:05.775Z","comments":true,"path":"2023/03/27/tool-list/","permalink":"http://blog.vollate.top/2023/03/27/tool-list/","excerpt":"","text":"收录了Linux下使用的一些工具 Screen Shot/Recorder SimpleScreenRecorder OBS studio Flameshot Cloud Drive Onedrive OnedriveGUI: GUI for client above Rclone: better than above Proxy Clash Client cfw(closed-source) 不建议使用 clash-verge(open-source) clash verge rev; 因为某些烂人的原因，被铁拳制裁后重生的版本 注意 Clash 和 Clash.Meta 是开源软件，clash.Premium 为 Clash 原作者在 Clash 基础上开发的闭源软件，介意误用 只剩 Meta 了且改名了。原神，启动!!! V2ray Client v2rayA(open-source) Diagram drawio Office libreoffice onlyoffice xournal++ 全平台手写板工具，但是安卓端还很烂 Resource Monitor btop or bpytop htop Diff Tools meld","categories":[],"tags":[{"name":"Tools","slug":"Tools","permalink":"http://blog.vollate.top/tags/Tools/"}]},{"title":"Article Archive","slug":"article-archives","date":"2022-11-10T20:10:57.000Z","updated":"2024-04-29T07:08:05.767Z","comments":true,"path":"2022/11/10/article-archives/","permalink":"http://blog.vollate.top/2022/11/10/article-archives/","excerpt":"","text":"OS 内存管理 Program CMake export lib oneAPI|DPC++归档 CppCon Network GFW report","categories":[],"tags":[{"name":"Archive","slug":"Archive","permalink":"http://blog.vollate.top/tags/Archive/"}]},{"title":"Happy Runner (乐道不跑)","slug":"happy-runner","date":"2022-11-03T02:57:19.000Z","updated":"2024-04-29T07:08:05.771Z","comments":true,"path":"2022/11/03/happy-runner/","permalink":"http://blog.vollate.top/2022/11/03/happy-runner/","excerpt":"","text":"Requirement 一部root了的安卓手机(解不了bl的可以试试太极) 如何root建议google,据说小米开模糊定位不root也行，但是没试过(没有没root的手机) Steps 下载fake location，链接挂了就上 github 搜 买高级版 (花钱) 设置里面把地图换成百度 路线模拟里面画路线，建议把每个可能的打卡点都过一遍 现在不用打卡了,差不多就行，注意别超过单次最大路程 开启路线模拟和乐跑，设置速度(注意别太快了)，建议开启浮动速度和模拟步频 记得到时间来关乐跑免得超时 问题排查 开了模拟没反应: 换运行模式(root/no root) 乐跑闪退(root了的手机/模拟器): 对乐跑隐藏root(Magisk/fake location 内置) 目前最新版乐跑好像不能在模拟器中运行，大概是检测模拟器？ 其他: 看文档, google，我有一个朋友 本教程仅供参考，使用有风险，对于按照本教程操作造成被检测等等问题概不负责","categories":[],"tags":[{"name":"Magic","slug":"Magic","permalink":"http://blog.vollate.top/tags/Magic/"},{"name":"Tips","slug":"Tips","permalink":"http://blog.vollate.top/tags/Tips/"}]},{"title":"First Post","slug":"first-post","date":"2022-10-01T03:12:59.000Z","updated":"2024-04-29T07:08:05.771Z","comments":true,"path":"2022/10/01/first-post/","permalink":"http://blog.vollate.top/2022/10/01/first-post/","excerpt":"","text":"总算整了个能看的 blog 界面 之前搭图床然后疯狂报错 最后发现发现设置 nginx 的时候 location 拼错了 不开语法高亮的下场 总之捣鼓了快一个月想起来弄一下断断续续的终于配好了","categories":[],"tags":[]}],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://blog.vollate.top/categories/JavaScript/"},{"name":"Shell Script","slug":"Shell-Script","permalink":"http://blog.vollate.top/categories/Shell-Script/"},{"name":"Compiler","slug":"Compiler","permalink":"http://blog.vollate.top/categories/Compiler/"},{"name":"Linux","slug":"Linux","permalink":"http://blog.vollate.top/categories/Linux/"},{"name":"Server","slug":"Server","permalink":"http://blog.vollate.top/categories/Server/"},{"name":"Blog","slug":"Blog","permalink":"http://blog.vollate.top/categories/Blog/"},{"name":"OS","slug":"OS","permalink":"http://blog.vollate.top/categories/OS/"},{"name":"C++","slug":"C","permalink":"http://blog.vollate.top/categories/C/"}],"tags":[{"name":"Notes","slug":"Notes","permalink":"http://blog.vollate.top/tags/Notes/"},{"name":"Knowledge","slug":"Knowledge","permalink":"http://blog.vollate.top/tags/Knowledge/"},{"name":"Journal","slug":"Journal","permalink":"http://blog.vollate.top/tags/Journal/"},{"name":"Books","slug":"Books","permalink":"http://blog.vollate.top/tags/Books/"},{"name":"Tools","slug":"Tools","permalink":"http://blog.vollate.top/tags/Tools/"},{"name":"Archive","slug":"Archive","permalink":"http://blog.vollate.top/tags/Archive/"},{"name":"Magic","slug":"Magic","permalink":"http://blog.vollate.top/tags/Magic/"},{"name":"Tips","slug":"Tips","permalink":"http://blog.vollate.top/tags/Tips/"}]}